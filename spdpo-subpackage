#!/bin/sh

#/////////////////////////////////////////////////////////////////////////////
#
# Separate process is necessary in order to use different POSTPROCESS_N sets
# if used as a subroutine, those variable sets will be messed up.
#
#/////////////////////////////////////////////////////////////////////////////


#/////////////////////////////////////////////////////////////////////////////
#
# Subroutines
#
#/////////////////////////////////////////////////////////////////////////////


usage() {
    echo "NOT MEANT TO BE RUN BY USER"
    echo "usage: spdpo-subpackage [-d] -f flavour -n package_name -e edition"
    exit 1
}


#/////////////////////////////////////////////////////////////////////////////


create_pkg() {

cat > ${CHROOT}-$EDITION/tmp/+MANIFEST << EOF
name: "$NAME"
version: $VER-$EDITION-$FLAVOUR-$ARCH
origin: "avz/$NAME"
comment: "$COMMENT"
arch: freebsd:$KVERSION:x86:$ARCH
prefix: /
maintainer: $MAINTAINER
licenselogic: or
licenses: [$LICENSE]
desc: <<EOD
  $DESCR
EOD
EOF

    echo "deps: {" >> ${CHROOT}-$EDITION/tmp/+MANIFEST

    for i in $DEPS
    do
        k1=`echo $i | awk -F :: '{print $1}'`
        _edition=`echo $i | awk -F / '{print $2}'`
        [ x$_edition = x ] && _edition=$EDITION     

        k=`find $BUNDLEDIR -name $k1 -type f | head -n 1`

        if [ x$k != x ];then
            j=`grep "^VER=" $k | head -n 1 | sed -e 's/VER=//'`
        else
            echo -e "${_r}//////// $NAME-$VER-$_edition: dependency $i not found${_n}"
            [ $DEBUG = 1 ] && read N
            exit 1
        fi
        echo "  \"$i\": {origin: \"avz/$i\", version: $j-$_edition-$FLAVOUR-$ARCH}" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    done

    echo "}" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    echo "scripts: {" >> ${CHROOT}-$EDITION/tmp/+MANIFEST

    if [ "x$PREINSTALL_0" != "x" ]; then
        echo "  pre-install: <<EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST 
        echo "    #!/bin/sh" >> ${CHROOT}-$EDITION/tmp/+MANIFEST 
        i=0
        while : ;
        do
            eval _cmd=\"\$PREINSTALL_${i}\"
            if [ -n "$_cmd" ];then
                echo "    $_cmd" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
                i=$(expr $i + 1)
            else
                break
            fi
        done
        echo "EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    fi
    echo "  post-install: <<EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST 
    echo "    #!/bin/sh" >> ${CHROOT}-$EDITION/tmp/+MANIFEST

    #/////  .info files must be installed properly
    INFO=`chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER/usr/share/info -name \"*.info\" 2>/dev/null" | sed -e 's@^$DDIR/$INAME-$VER/usr/share/info/@@' 2>/dev/null`
    if [ "x$INFO" != x ];then
        [ -f ${CHROOT}-$EDITION/$DDIR/$INAME-$VER/usr/share/info/dir ] && rm ${CHROOT}-$EDITION/$DDIR/$INAME-$VER/usr/share/info/dir
        for i in $INFO
        do
            echo "    [ -e /usr/bin/install-info ] && /usr/bin/install-info /usr/share/info/$i /usr/share/info/dir" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
        done
    fi

    #/////  /usr/lib/charset.alias is generated by many packages, rename it appropriately

    if [ -f ${CHROOT}-$EDITION/$DDIR/$INAME-$VER/usr/lib/charset.alias ];then
        sed -i -e "s@^@    @" ${CHROOT}-$EDITION/$DDIR/$INAME-$VER/usr/lib/charset.alias 2>/dev/null
        mv ${CHROOT}-$EDITION/$DDIR/$INAME-$VER/usr/lib/charset.alias ${CHROOT}-$EDITION/$DDIR/$INAME-$VER/usr/lib/charset.alias.$NAME
    fi

    #/////  /usr/lib/perl/.../perllocal.pod must be appended to the existing file

    CONTENT=""
    POD=`chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER -name \"perllocal.pod\""`
    if [ "x$POD" != "x" ];then
        sed -i -e "s@^@    @" ${CHROOT}-$EDITION/$POD 2>/dev/null
        mv ${CHROOT}-$EDITION/$POD ${CHROOT}-$EDITION/$POD.$NAME
    fi

    #/////

    if [ "x$POSTINSTALL_0" != "x" ]; then
        i=0
        while : ;
        do
            eval _cmd=\"\$POSTINSTALL_${i}\"
            if [ -n "$_cmd" ];then
                echo "    $_cmd" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
                i=$(expr $i + 1)
            else
                break
            fi
        done
    fi
    echo "    exit 0" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    echo "EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    if [ "x$PREDEINSTALL_0"    != "x" ]; then
        echo "  pre-deinstall: <<EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST 
        echo "    #!/bin/sh" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
        i=0
        while : ;
        do
            eval _cmd=\"\$PREDEINSTALL_${i}\"
            if [ -n "$_cmd" ];then
                echo "    $_cmd" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
                i=$(expr $i + 1)
            else
                break
            fi
        done
        echo "EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    fi
    if [ "x$POSTDEINSTALL_0"    != "x" ]; then
        echo "  post-deinstall: <<EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST 
        echo "    #!/bin/sh" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
        i=0
        while : ;
        do
            eval _cmd=\"\$POSTDEINSTALL_${i}\"
            if [ -n "$_cmd" ];then
                echo "    $_cmd" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
                i=$(expr $i + 1)
            else
                break
            fi
        done
        echo "EOD" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    fi

    #/////  Files are listed after some of them were deleted earlier
        
    echo "}" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    echo "files: {" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    for i in `chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER -type f" | sed -e "s@ @%%%%@g" 2>/dev/null`
    do
        j=`echo "$i" | sed -e "s@%%%%@ @g"` 
        chroot ${CHROOT}-$EDITION sh -c "sha256 \"$j\"" | sed -e 's@^SHA256 (@  "@g' | sed -e 's@) = @"--:--@g' |  sed -e "s@$DDIR/$INAME-$VER@@" | sed -e "s@--:--@: '@" | sed -e "s@\$@'@" | sed "s@%@%25@g" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    done
    chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER -type l" | sed -e 's@^@  "@' | sed -e "s@$DDIR/$INAME-$VER@@" | sed -e "s@\$@\": '-'@" | sed -e "s@%@%25@g">> ${CHROOT}-$EDITION/tmp/+MANIFEST
    echo "}" >> ${CHROOT}-$EDITION/tmp/+MANIFEST

    echo "directories: {" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    ED=`chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER -type d -empty" | sed -e s@^$DDIR/$INAME-$VER@@`
    for i in $ED
    do
        echo "  \""$i"\": 'y'" >> ${CHROOT}-$EDITION/tmp/+MANIFEST
    done
    echo "}" >> ${CHROOT}-$EDITION/tmp/+MANIFEST

    chroot ${CHROOT}-$EDITION sh -c "pkg create -o $PDIR -r $DDIR/$INAME-$VER -m /tmp"
}


#/////////////////////////////////////////////////////////////////////////////////

install_C() {

    if [ "x$INSTALLPREFIX_NAME" = "x" ];then
        chroot ${CHROOT}-$EDITION sh -c "mkdir -p /$PYTHONPATH"
        chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && env PYTHONPATH=$PYTHONPATH $MAKE $INSTALLTARGET"
    else
        chroot ${CHROOT}-$EDITION sh -c "mkdir -p /$PYTHONPATH"
        chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && env PYTHONPATH=$PYTHONPATH $MAKE $INSTALLPREFIX_NAME=$DDIR/$INAME-$VER $INSTALLTARGET"
    fi
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#/////////////////////////////////////////////////////////////////////////////////


install_CMAKE() {

    if [ "x$INSTALLPREFIX_NAME" = "x" ];then
        chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && $MAKE $INSTALLTARGET"
    else
        chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && $MAKE $INSTALLPREFIX_NAME=$DDIR/$INAME-$VER $INSTALLTARGET"
    fi
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#///////////////////////////////////////////////////////////////////////////////////////////


install_PERL() {

    if [ "x$INSTALLPREFIX_NAME" = "x" ];then
        chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && $MAKE $INSTALLTARGET"
    else
        chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && $MAKE $INSTALLPREFIX_NAME=$DDIR/$INAME-$VER $INSTALLTARGET"
    fi
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#///////////////////////////////////////////////////////////////////////////////////////////


install_PERLB() {
    chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && $BDIR/$PPKGNAME-$VER/$CONFSUBDIR/Build install --destdir $DDIR/$INAME-$VER"
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#///////////////////////////////////////////////////////////////////////////////////////////////////


install_PYTHON() {
    chroot ${CHROOT}-$EDITION sh -c "mkdir -p /$PYTHONPATH"
    chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && env PYTHONPATH=$PYTHONPATH python $BDIR/$PPKGNAME-$VER/$CONFSUBDIR/setup.py install --prefix=/usr --root=$DDIR/$INAME-$VER"
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#///////////////////////////////////////////////////////////////////////////////////////////////////


install_PYTHON3() {
    chroot ${CHROOT}-$EDITION sh -c "mkdir -p /$PYTHONPATH"
    chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && env PYTHONPATH=$PYTHONPATH python3 $BDIR/$PPKGNAME-$VER/$CONFSUBDIR/setup.py install --prefix=/usr --root=$DDIR/$INAME-$VER"
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#///////////////////////////////////////////////////////////////////////////////////////////


install_NODEJS() {
    chroot ${CHROOT}-$EDITION sh -c "mkdir -p $DDIR/$INAME-$VER/usr"
    chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$BUILDDIR && npm install -g --production --prefix $DDIR/$INAME-$VER/usr"
    #chroot ${CHROOT}-$EDITION sh -c "rm  $DDIR/$INAME-$VER/usr/lib/node_modules/$PPKGNAME"
    #chroot ${CHROOT}-$EDITION sh -c "cp -Rp $BDIR/$PPKGNAME-$VER $DDIR/$INAME-$VER/usr/lib/node_modules/$PPKGNAME"
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#///////////////////////////////////////////////////////////////////////////////////////////////////


install_GO() {
    chroot ${CHROOT}-$EDITION sh -c "mkdir -p $DDIR/$INAME-$VER/usr/lib/go-$GOVER"
    chroot ${CHROOT}-$EDITION sh -c "[ -d $BDIR/bin ] && cp -Rp $BDIR/bin $DDIR/$INAME-$VER/usr"
    chroot ${CHROOT}-$EDITION sh -c "[ -d $BDIR/pkg ] && cp -Rp $BDIR/pkg $DDIR/$INAME-$VER/usr/lib/go-$GOVER"
    chroot ${CHROOT}-$EDITION sh -c "cp -Rp $BDIR/src $DDIR/$INAME-$VER/usr/lib/go-$GOVER"
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#////////////////////////////////////////////////////////////////////////////////////////////////////


install_CUSTOM() {

    i=0
    while : ;
    do
        eval _cmd=\"\$INSTALL_${i}\"

        if [ -n "$_cmd" ];then
            chroot ${CHROOT}-$EDITION sh -c "$_cmd"
            [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
            i=$(expr $i + 1)
        else
            break
        fi
    done

}


#////////////////////////////////////////////////////////////////////////////////////////////////////


install_SCONS() {
    chroot ${CHROOT}-$EDITION sh -c "cd $BDIR/$PPKGNAME-$VER/$CONFSUBDIR && /usr/bin/scons $INSTALLTARGET"
    [ $? != 0 -a x$IGNOREINSTALLERROR != "x1" ] && exit 1
}


#/////////////////////////////////////////////////////////////////////////////////
#
# Subroutines end
#
#/////////////////////////////////////////////////////////////////////////////////


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


#/////////////////////////////////////////////////////////////////////////////////
#
# Check arguments
#
#/////////////////////////////////////////////////////////////////////////////////


DEBUG=0
FLAVOUR="."
PKGNAME="."
PPKGNAME="."

if [ $# -eq 0 ];then
    usage
else
    while [ $# -gt 0 ];
    do
        case $1 in
            -d)
                DEBUG=1
            ;;
            -e)
                shift
                EDITION=$1
            ;;
            -f)
                shift
                FLAVOUR=$1
            ;;
            -n)
                shift
                PKGNAME=$1
                PPKGNAME=`echo $1 | awk -F :: '{print $1}'`

                #preliminary include
                . /etc/spdpo.conf
                _INC=`cd $BUNDLEDIR/.. && find . -name $PKGNAME -type f`
                INCLUDE=`dirname $_INC`

            ;;
        esac
        shift
    done
fi

#///////////////////////////////////////////////////////////////////////////////////
#
# Include necessary configuration files 
#
#///////////////////////////////////////////////////////////////////////////////////

. /etc/spdpo.conf

[ -f $_CFILE ] && . $_CFILE

if [ -f $WDIR/$PPKGNAME ];then
    . $WDIR/$PPKGNAME
else
    echo "File not found $WDIR/$PPKGNAME"
    exit 1
fi

if [ -f $WDIR/$PKGNAME ];then
    . $WDIR/$PKGNAME
else
    echo "File not found $WDIR/$PKGNAME"
    exit 1
fi

[ "x$INAME" = "x" ] && INAME=$NAME
[ "x$BUILDDIR" = "x" ] && BUILDDIR=$CONFSUBDIR


#/////////////////////////////////////////////////////////////////////////////
#
# Prepare to install the software:
#
#//////////////////////////////////////////////////////////////////////////////

__START__=`date`

#///////////////////////////////////////////////////////////////////////////////////////
#
# install the software 
#
#///////////////////////////////////////////////////////////////////////////////////////

eval _cfg=\"\$DEPS_$EDITION\"
[ "x$_cfg" != x ] && DEPS="$_cfg"
eval _cmd=\"\$INSTALLTARGET_$EDITION\" 
[ -n "$_cmd" ] && INSTALLTARGET=$_cmd

install_$BUILDTYPE

echo -e "${_y}//////// $NAME-$VER-$EDITION: installed${_n}"
[ $DEBUG = 1 ] && read N


#/////////////////////////////////////////////////////////////////////////
#
# Postprocess installed software before pkg creation 
#
#/////////////////////////////////////////////////////////////////////////

i=0
j=0
while : ;
do
    eval _cmd=\"\$POSTPROCESS_${i}\"

    if [ -n "$_cmd" ];then
        chroot ${CHROOT}-$EDITION sh -c "$_cmd"
        i=$(expr $i + 1)
        j=1
    else
        break
    fi 
done

if [ $j = 1 ];then
    echo -e "${_y}//////// $NAME-$VER-$EDITION: postprocessed${_n}"
    [ $DEBUG = 1 ] && read N
fi;

echo -e "${_y}//////// Empty directories:${_b}"
chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER -type d -empty"
echo -e "${_y}//////// Symlinks:${_b}"
chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER -type l"
echo -e "${_y}//////// Hardlinks:${_b}"
chroot ${CHROOT}-$EDITION sh -c "find $DDIR/$INAME-$VER -type f ! -links 1"
echo -e "${_n}"
[ $DEBUG = 1 ] && read N


#/////////////////////////////////////////////////////////////////////////
#
# build pkg
#
#/////////////////////////////////////////////////////////////////////////

if [ x$BUILDTYPE != xPEAR ];then
    create_pkg
    chroot ${CHROOT}-$EDITION sh -c "chflags -R noschg $DDIR/$INAME-$VER"
    chroot ${CHROOT}-$EDITION sh -c "rm -r $DDIR/$INAME-$VER"
fi

_size=`chroot ${CHROOT}-$EDITION sh -c "ls -l $PDIR/$NAME-$VER-$EDITION-$FLAVOUR-$ARCH.txz" | awk '{ print $5 }'`
if [ ${_size} -lt 100 ];then
    echo -e "${_r}//////// ERROR $NAME-$VER-$EDITION: created package seems to be empty${_n}"
    chroot ${CHROOT}-$EDITION sh -c "rm $PDIR/$NAME-$VER-$EDITION-$FLAVOUR-$ARCH.txz"
    exit 1
else
    echo -e "${_y}//////// $NAME-$VER-$EDITION: created package size is ${_size} bytes${_n}"
    [ $DEBUG = 1 ] && read N
fi


